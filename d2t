#!/bin/bash

usage() {
    echo ""
    echo "docx2tex"
    echo ""
    echo "Usage: d2t [options ...] <docx file>"
    echo ""
    echo "Options:"
    echo "   -o    path to custom output directory"
    echo "   -c    path to custom word2tex configuration file"
    echo "   -p    generate PDF with pdflatex"
    echo "   -t    draw table grid lines"
    echo "   -x    custom XSLT stylesheet for Hub processing"
    echo "   -d    debug mode"
    1>&2; exit 1;
}
# print out error step and exit code
function exitonerror {
    echo "errors encountered while running $2. exited with code $1"
    exit 1
}
# readlink -f is unavailable on Mac OS X
function real_dir() {
    SOURCE="$1"
    while [ -h "$SOURCE" ]; do # resolve $SOURCE until the file is no longer a symlink
	DIR="$( cd -P "$( dirname "$SOURCE" )" && pwd )"
	SOURCE="$(readlink "$SOURCE")"
	[[ $SOURCE != /* ]] && SOURCE="$DIR/$SOURCE" # if $SOURCE was a relative symlink, we need to resolve it relative to the path where the symlink file was located
    done
    echo "$( cd -P "$( dirname "$SOURCE" )" && pwd  )"
}

# cygwin check
cygwin=false;
case "`uname`" in
    CYGWIN*) cygwin=true;
esac

# script directory
DIR="$( real_dir "${BASH_SOURCE[0]}" )"
CALABASH=$DIR/calabash/calabash.sh

# invoke pdflatex
PDFLATEX=pdflatex

# word2tex configuration
CONF=$DIR/conf/conf.xml

# specify options
while getopts ":o:c:x:ptd" opt; do
    case "${opt}" in
	o)
	    OUT_DIR=${OPTARG}
	    ;;
	c)
	    CONF=${OPTARG}
	    ;;
	x)
	    CUSTOMXSL=${OPTARG}
	    ;;
	p)
	    PDF=yes
	    ;;
	t)
	    GRID=yes
	    ;;
	d)
	    DEBUG=yes
	    ;;
	\?)
	    echo "Invalid option: -$OPTARG" >&2
	    usage
	    ;;
	:)
	    echo "Option -$OPTARG requires an argument." >&2
	    usage
	    ;;
    esac
done
shift $((OPTIND-1))
# check if argument for file is set
if [ -z $1 ]; then
    usage
fi

# file as 1st argument
FILE=$1

# set basename
BASENAME=$(basename $FILE .docx)

# set and create output directory
if [ -z $OUT_DIR ]; then
    OUT_DIR="$(real_dir "$FILE")"
fi
if [ ! -d $OUT_DIR ]; then
    mkdir $OUT_DIR
fi

# set log
LOG=$OUT_DIR/$BASENAME.log
# remove log from previous runs
if [ -e $LOG ]; then
    rm $LOG
fi

# debugging
DEBUG_DIR=$OUT_DIR/debug

# pdflatex outdir path
PDFLATEX_OUT=$OUT_DIR

# make absolute paths
if $cygwin; then
    FILE=$(cygpath -ma "$FILE")
    OUT_DIR=$(cygpath -ma "$OUT_DIR")
    DIR=$(cygpath -ma "$DIR")
    CONF=$(cygpath -ma "$CONF")
    DEBUG_DIR_URI=file:/$(cygpath -ma "$DEBUG_DIR" )
else
    DEBUG_DIR_URI=file:$DEBUG_DIR
fi

# check if file exists
if [ ! -f $FILE ]; then
    echo "Error: input file not found: $FILE"
    usage
fi

echo "starting docx2tex"

if [ "$DEBUG" = "yes" ]; then
    echo "debug mode: $DEBUG"
    echo "storing debug files to $DEBUG_DIR"
fi

# word2tex xproc pipeline
$CALABASH \
    -i conf=$CONF \
    -o result=$OUT_DIR/$BASENAME.tex \
    -o hub=$OUT_DIR/$BASENAME.xml \
    $DIR/xpl/docx2tex.xpl \
    docx=$FILE \
    custom-xsl=$CUSTOMXSL \
    grid=$GRID \
    debug=$DEBUG \
    debug-dir-uri=$DEBUG_DIR_URI \
    status-dir-uri=$DEBUG_DIR_URI/status \
    2>&1 2>>$LOG || exitonerror $? docx2tex
echo "writing texfile => $OUT_DIR/$BASENAME.tex"

# run pdflatex with "-p"
if [ "$PDF" = "yes" ]; then
    echo $OUT_DIR
$PDFLATEX \
    -interaction=nonstopmode \
    -output-directory=$OUT_DIR \
    $PDFLATEX_OUT/$BASENAME.tex \
    1>>$LOG || exitonerror $? pdflatex
echo "writing pdf => $OUT_DIR/$BASENAME.pdf"
fi

echo "docx2tex finished, for details see $OUT_DIR/$BASENAME.log"
echo ""
